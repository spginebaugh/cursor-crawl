{
  "name": "cursorcrawl",
  "displayName": "CursorCrawl",
  "description": "Generates .cursor/rules files to help Cursor generate better code ",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.96.2"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:cursorcrawl.analyze",
    "onCommand:cursorcrawl.buildSymbolIndex",
    "onCommand:cursorcrawl.extractContext",
    "onCommand:cursorcrawl.generateDocstringIndex",
    "onCommand:cursorcrawl.generateDocstringIndexParallel",
    "onCommand:cursorcrawl.resumeDocstringGeneration",
    "onCommand:cursorcrawl.generateCodebaseContext",
    "onCommand:cursorcrawl.analyzeDuplicateLogic",
    "onStartupFinished",
    "workspaceContains:**/*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cursorcrawl.analyze",
        "title": "Analyze Codebase"
      },
      {
        "command": "cursorcrawl.buildSymbolIndex",
        "title": "Build Symbol Index (No Docstrings)"
      },
      {
        "command": "cursorcrawl.extractContext",
        "title": "Extract Context from Prompt"
      },
      {
        "command": "cursorcrawl.generateDocstringIndex",
        "title": "Generate Docstrings for Symbol Index"
      },
      {
        "command": "cursorcrawl.generateDocstringIndexParallel",
        "title": "Generate Docstrings for Symbol Index (Parallel)"
      },
      {
        "command": "cursorcrawl.resumeDocstringGeneration",
        "title": "Resume Docstring Generation (Fill Empty Only)"
      },
      {
        "command": "cursorcrawl.generateCodebaseContext",
        "title": "Generate Codebase Context from Symbol Index"
      },
      {
        "command": "cursorcrawl.analyzeDuplicateLogic",
        "title": "Analyze Duplicate Logic in Codebase"
      }
    ],
    "configuration": {
      "title": "CursorCrawl",
      "properties": {
        "cursorcrawl.openaiApiKey": {
          "type": "string",
          "default": "",
          "description": "OpenAI API Key for generating docstrings"
        },
        "cursorcrawl.docstringGenerationConcurrency": {
          "type": "number",
          "default": 20,
          "minimum": 1,
          "maximum": 20,
          "description": "Maximum number of files to process concurrently when generating docstrings in parallel mode"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/fs-extra": "^11.0.4",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.97.0",
    "@typescript-eslint/eslint-plugin": "^8.22.0",
    "@typescript-eslint/parser": "^8.22.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "esbuild": "^0.24.2",
    "eslint": "^9.19.0",
    "npm-run-all": "^4.1.5",
    "ts-node": "^10.9.2"
  },
  "dependencies": {
    "@babel/parser": "^7.26.9",
    "dotenv": "^16.4.7",
    "fs-extra": "^11.3.0",
    "openai": "^4.86.1",
    "p-limit": "^6.2.0",
    "typescript": "^5.7.3",
    "zod": "^3.24.2"
  }
}
